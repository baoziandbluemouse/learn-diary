#include <iostream>

//deque内部并不使用一个单一的连续内存块，而是将元素分割成多个固定大小的块（也称为缓冲区或页面）
//并通过一个中央映射数组（通常称为map）来管理这些块。
//具体来说，deque的内部结构可以分为以下几个部分：

//1. 中央映射数组
// 这是一个指针数组，每个指针指向一个数据块
// 映射数组是动态分配的，大小可以根据需要增长或缩小
// 映射数组允许deque在两端添加新的数据块，而无需移动现有的数据块

//2. 数据块
// 每个数据块是一个固定大小的数组，存储实际的元素
// 数据块的大小通常与编译器和平台相关，但在大多数实现中，数据块的大小在运行时是固定的(最大512字节)

//3. 起始和结束指针
//  deque维护指向中央映射数组中第一个有效数据块的指针以及第一个无效数据块的指针。
//  这些指针帮助deque快速地在两端添加或删除数据块。

//实现一个简单的deque
//具体实现功能：动态数组，头尾指针，自动扩展，迭代器支持

//我们将使用一个动态分配的数组作为内部缓冲区，并通过头尾索引来管理队列的前后端。
//为了支持在两端高效插入和删除，我们将采用环形缓冲区的概念，即当索引达到数组的末端时，自动回绕到数组的开头



int main()
{
    std::cout << "Hello, World!" << std::endl;
    return 0;
}
